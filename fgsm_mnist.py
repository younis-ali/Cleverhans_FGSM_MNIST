# -*- coding: utf-8 -*-
"""FGSM_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MYOL-4cNqthpUtOaseR-zJc4c0LKobj7
"""

def fgsmAttack():
  import cleverhans
  import tensorflow as tf
  import numpy as np
  import matplotlib.pyplot as plt
  from tensorflow import keras

  session = tf.Session()
  keras.backend.set_session(session)

  print('Download and preprocess data')
  mnist = tf.keras.datasets.mnist
  (mn_x_train, mn_y_train), (mn_x_test, mn_y_test) = mnist.load_data()
  mn_x_train = mn_x_train / 255.0
  mn_x_test = mn_x_test / 255.0

  test_images_1d = mn_x_test.reshape((10000, 28 * 28))
  test_images_1d = test_images_1d.astype('float32') / 255

  # Plot some sample images from MNIST dataset
  n_classes = 10
  inds=np.array([mn_y_train==i for i in range(n_classes)])
  f,ax=plt.subplots(2,5,figsize=(10,5))
  ax=ax.flatten()
  for i in range(n_classes):
      ax[i].imshow(mn_x_train[np.argmax(inds[i])].reshape(28,28))
      ax[i].set_title(str(i))
  plt.show()

  # Built, train, and test model
  model = tf.keras.Sequential([
      tf.keras.layers.Flatten(input_shape=(28, 28)),
      tf.keras.layers.Dense(32, activation=tf.nn.relu),
      tf.keras.layers.Dense(16, activation=tf.nn.relu),
      tf.keras.layers.Dense(10),
      tf.keras.layers.Activation(tf.nn.softmax) 
  ])

  from tensorflow.keras.callbacks import ModelCheckpoint
  model.compile(optimizer='adam',
                loss= 'sparse_categorical_crossentropy',
                metrics=['accuracy'])

  model.fit(mn_x_train, mn_y_train, epochs=10, validation_split=0.2, callbacks=[ModelCheckpoint('MNIST.h5',save_best_only=True)])
  test_loss, test_acc = model.evaluate(mn_x_test, mn_y_test)

  print('Test accuracy:', test_acc)

  from tensorflow.keras.models import load_model
  network = load_model('MNIST.h5')
  print('Model saved successfully')
  
  # Integrate clevehans with saved network
  from cleverhans.utils_keras import KerasModelWrapper
  wrap = KerasModelWrapper(network)
  x = tf.placeholder(tf.float32, shape=(None, 784))
  y = tf.placeholder(tf.float32, shape=(None, 10))

  # Apply FGSM attack
  from cleverhans.attacks import FastGradientMethod
  fgsm = FastGradientMethod(wrap, sess=session)

  fgsm_rate = 0.0001
  fgsm_params = {'eps': fgsm_rate,'clip_min': 0.,'clip_max': 1.}
  adv_x = fgsm.generate(x, **fgsm_params)
  adv_x = tf.stop_gradient(adv_x)
  adv_prob = network(adv_x)

  fetches = [adv_prob]
  fetches.append(adv_x)
  outputs = session.run(fetches=fetches, feed_dict={x:test_images_1d}) 
  adv_prob = outputs[0]
  adv_examples = outputs[1]

  adv_predicted = adv_prob.argmax(1)
  adv_accuracy = np.mean(adv_predicted == mn_y_test)

  print("Adversarial accuracy: %.5f" % adv_accuracy)

  # Plot some adversarial examples
  n_classes = 10
  f,ax=plt.subplots(2,5,figsize=(10,5))
  ax=ax.flatten()
  for i in range(n_classes):
      ax[i].imshow(adv_examples[i].reshape(28,28))
      ax[i].set_title("Adv: %d, Label: %d" % (adv_predicted[i], mn_y_test[i]))
  plt.show()

def main():
  fgsmAttack()

main()
